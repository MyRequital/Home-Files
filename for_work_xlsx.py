import os
from openpyxl import Workbook, load_workbook
from openpyxl.utils import get_column_letter
from pathlib import Path
import re


DATA_FOLDER = Path("tables")
DATA_FOLDER.mkdir(exist_ok=True)

VALID_CELL_REGEX = re.compile(r"^[A-Z]+[1-9][0-9]*$")  # –ü—Ä–∏–º–µ—Ä: A1, B12, AA100

def is_valid_cell_address(address: str) -> bool:
    return VALID_CELL_REGEX.fullmatch(address) is not None


def create_table(table_name: str, user_id: str) -> None:
    """
    –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É Excel –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—Ä—É—á–Ω—É—é –∑–∞–ø–æ–ª–Ω–∏—Ç—å —è—á–µ–π–∫–∏.
    """
    user_folder = DATA_FOLDER / user_id
    user_folder.mkdir(exist_ok=True)
    file_path = user_folder / f"{table_name}.xlsx"

    if file_path.exists():
        print("‚ùå –¢–∞–±–ª–∏—Ü–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return

    workbook = Workbook()
    sheet = workbook.active
    sheet.title = "Data"

    print("‚ñ∂ –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö (–≤–≤–µ–¥–∏—Ç–µ '0' –∫–∞–∫ –∞–¥—Ä–µ—Å —è—á–µ–π–∫–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)\n")

    try:
        while True:
            cell_address = input("–í–≤–µ–¥–∏—Ç–µ —è—á–µ–π–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, A3): ").strip().upper()

            if cell_address == "0":
                break

            if not is_valid_cell_address(cell_address):
                print("‚ö†Ô∏è –ê–¥—Ä–µ—Å —è—á–µ–π–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ª–∞—Ç–∏–Ω–∏—Ü–µ–π –∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≤—Ä–æ–¥–µ 'A1'. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
                continue

            cell_value = input("–ß–µ–º –∑–∞–ø–æ–ª–Ω–∏—Ç—å: ")
            sheet[cell_address] = cell_value

        workbook.save(file_path)
        print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ '{table_name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{user_id}' –ø–æ –ø—É—Ç–∏: {file_path}")

    except Exception as error:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: {error}")


def work_with_table(table_name: str, user_id: str) -> None:
    """
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ–±–∞–≤–ª—è—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω—è—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è —è—á–µ–µ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ.
    """
    file_path = DATA_FOLDER / user_id / f"{table_name}.xlsx"

    if not file_path.exists():
        print("‚ùå –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    workbook = load_workbook(file_path)
    sheet = workbook.active

    print("‚ñ∂ –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã (–≤–≤–µ–¥–∏—Ç–µ '0' –¥–ª—è –≤—ã—Ö–æ–¥–∞)\n")

    try:
        while True:
            cell_address = input("–í–≤–µ–¥–∏—Ç–µ —è—á–µ–π–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, A3): ").strip().upper()
            if cell_address == "0":
                break

            if not is_valid_cell_address(cell_address):
                print("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å —è—á–µ–π–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –∏ –Ω–æ–º–µ—Ä, –Ω–∞–ø—Ä–∏–º–µ—Ä 'B2'.")
                continue

            current_value = sheet[cell_address].value
            if current_value is not None:
                print(f"‚ö†Ô∏è –Ø—á–µ–π–∫–∞ ({cell_address}) —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç: '{current_value}'")
                choice = input("–ó–∞–º–µ–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ? (1 - –î–∞, 0 - –ù–µ—Ç): ").strip()
                if choice != "1":
                    continue

            new_value = input("–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ")
            sheet[cell_address] = new_value

        workbook.save(file_path)
        print("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")

    except Exception as error:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ç–∞–±–ª–∏—Ü–µ–π: {error}")


def show_table(table_name: str, user_id: str) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ (A1) –ó–Ω–∞—á–µ–Ω–∏–µ.
    """
    file_path = DATA_FOLDER / user_id / f"{table_name}.xlsx"

    if not file_path.exists():
        print("‚ùå –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    workbook = load_workbook(file_path)
    sheet = workbook.active

    print("\nüìä –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–±–ª–∏—Ü—ã:")

    output_lines = []

    for row in sheet.iter_rows():
        line = []
        for cell in row:
            if cell.value is not None:
                line.append(f"({cell.coordinate}) {cell.value}")
        if line:
            output_lines.append(" | ".join(line))

    if output_lines:
        print("\n".join(output_lines))
    else:
        print("üï≥Ô∏è –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞.")



def drop_table(table_name: str, user_id: str) -> None:
    """
    –£–¥–∞–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    file_path = DATA_FOLDER / user_id / f"{table_name}.xlsx"

    if not file_path.exists():
        print("‚ùå –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    file_path.unlink()
    print(f"üóëÔ∏è –¢–∞–±–ª–∏—Ü–∞ '{table_name}' —É–¥–∞–ª–µ–Ω–∞.")


def main() -> None:
    print(
        f"\n1 - –°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É (–ù–∞–∑–≤–∞–Ω–∏–µ)"
        f"\n2 - –†–∞–±–æ—Ç–∞—Ç—å —Å —Ç–∞–±–ª–∏—Ü–µ–π (–î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É/(-–∏))"
        f"\n3 - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É"
        f"\n4 - –£–¥–∞–ª–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É\n"
    )

    try:
        choice = int(input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: "))

        if choice in {1, 2, 3, 4}:
            table_name = input("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã: ")
            user_id = input("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ")

        match choice:
            case 1:
                create_table(table_name, user_id)

            case 2:
                work_with_table(table_name, user_id)

            case 3:
                show_table(table_name, user_id)

            case 4:
                drop_table(table_name, user_id)

            case _:
                print("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")


    except Exception as error:

        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {error}")


while True:
    main()